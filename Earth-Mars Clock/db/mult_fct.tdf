--lpm_mult CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone II" DSP_BLOCK_BALANCING="Auto" INPUT_A_IS_CONSTANT="NO" INPUT_B_IS_CONSTANT="YES" LPM_REPRESENTATION="UNSIGNED" LPM_WIDTHA=55 LPM_WIDTHB=30 LPM_WIDTHP=85 LPM_WIDTHS=1 MAXIMIZE_SPEED=5 dataa datab result CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48
--VERSION_BEGIN 9.1SP2 cbx_cycloneii 2010:03:24:20:38:24:SJ cbx_lpm_add_sub 2010:03:24:20:38:24:SJ cbx_lpm_mult 2010:03:24:20:38:24:SJ cbx_mgl 2010:03:24:21:00:10:SJ cbx_padd 2010:03:24:20:38:24:SJ cbx_stratix 2010:03:24:20:38:24:SJ cbx_stratixii 2010:03:24:20:38:24:SJ cbx_util_mgl 2010:03:24:20:38:24:SJ  VERSION_END


-- Copyright (C) 1991-2010 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION cycloneii_mac_mult (aclr, clk, dataa[dataa_width-1..0], datab[datab_width-1..0], ena, signa, signb)
WITH ( dataa_clock, dataa_width, datab_clock, datab_width, signa_clock, signb_clock)
RETURNS ( dataout[dataa_width+datab_width-1..0]);
FUNCTION cycloneii_mac_out (aclr, clk, dataa[dataa_width-1..0], ena)
WITH ( dataa_width = 0, output_clock)
RETURNS ( dataout[dataa_width-1..0]);
FUNCTION soft (in)
RETURNS ( out);

--synthesis_resources = dsp_9bit 16 lut 173 
SUBDESIGN mult_fct
( 
	dataa[54..0]	:	input;
	datab[29..0]	:	input;
	result[84..0]	:	output;
) 
VARIABLE
	add17_result[66..0]	:	WIRE;
	add21_result[67..0]	:	WIRE;
	add25_result[37..0]	:	WIRE;
	mac_mult1 : cycloneii_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 18,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult11 : cycloneii_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 12,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult13 : cycloneii_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 1,
			datab_clock = "none",
			datab_width = 18,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult15 : cycloneii_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 1,
			datab_clock = "none",
			datab_width = 12,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult3 : cycloneii_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 12,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult5 : cycloneii_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 18,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult7 : cycloneii_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 12,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_mult9 : cycloneii_mac_mult
		WITH (
			dataa_clock = "none",
			dataa_width = 18,
			datab_clock = "none",
			datab_width = 18,
			signa_clock = "none",
			signb_clock = "none"
		);
	mac_out10 : cycloneii_mac_out
		WITH (
			dataa_width = 36,
			output_clock = "none"
		);
	mac_out12 : cycloneii_mac_out
		WITH (
			dataa_width = 30,
			output_clock = "none"
		);
	mac_out14 : cycloneii_mac_out
		WITH (
			dataa_width = 19,
			output_clock = "none"
		);
	mac_out16 : cycloneii_mac_out
		WITH (
			dataa_width = 13,
			output_clock = "none"
		);
	mac_out2 : cycloneii_mac_out
		WITH (
			dataa_width = 36,
			output_clock = "none"
		);
	mac_out4 : cycloneii_mac_out
		WITH (
			dataa_width = 30,
			output_clock = "none"
		);
	mac_out6 : cycloneii_mac_out
		WITH (
			dataa_width = 36,
			output_clock = "none"
		);
	mac_out8 : cycloneii_mac_out
		WITH (
			dataa_width = 30,
			output_clock = "none"
		);
	sft18a[66..0] : soft;
	sft19a[66..0] : soft;
	sft20a[66..0] : soft;
	sft22a[67..0] : soft;
	sft23a[67..0] : soft;
	sft24a[67..0] : soft;
	sft26a[37..0] : soft;
	sft27a[37..0] : soft;
	sft28a[37..0] : soft;
	w1013w[85..0]	: WIRE;
	w476w	: WIRE;

BEGIN 
	add17_result[] = sft18a[].out + sft19a[].out;
	add21_result[] = sft22a[].out + sft23a[].out;
	add25_result[] = sft26a[].out + sft27a[].out;
	mac_mult1.dataa[] = ( dataa[17..0]);
	mac_mult1.datab[] = ( datab[17..0]);
	mac_mult1.signa = B"0";
	mac_mult1.signb = B"0";
	mac_mult11.dataa[] = ( dataa[53..36]);
	mac_mult11.datab[] = ( datab[29..18]);
	mac_mult11.signa = B"0";
	mac_mult11.signb = B"0";
	mac_mult13.dataa[] = ( dataa[54..54]);
	mac_mult13.datab[] = ( datab[17..0]);
	mac_mult13.signa = B"0";
	mac_mult13.signb = B"0";
	mac_mult15.dataa[] = ( dataa[54..54]);
	mac_mult15.datab[] = ( datab[29..18]);
	mac_mult15.signa = B"0";
	mac_mult15.signb = B"0";
	mac_mult3.dataa[] = ( dataa[17..0]);
	mac_mult3.datab[] = ( datab[29..18]);
	mac_mult3.signa = B"0";
	mac_mult3.signb = B"0";
	mac_mult5.dataa[] = ( dataa[35..18]);
	mac_mult5.datab[] = ( datab[17..0]);
	mac_mult5.signa = B"0";
	mac_mult5.signb = B"0";
	mac_mult7.dataa[] = ( dataa[35..18]);
	mac_mult7.datab[] = ( datab[29..18]);
	mac_mult7.signa = B"0";
	mac_mult7.signb = B"0";
	mac_mult9.dataa[] = ( dataa[53..36]);
	mac_mult9.datab[] = ( datab[17..0]);
	mac_mult9.signa = B"0";
	mac_mult9.signb = B"0";
	mac_out10.dataa[] = mac_mult9.dataout[];
	mac_out12.dataa[] = mac_mult11.dataout[];
	mac_out14.dataa[] = mac_mult13.dataout[];
	mac_out16.dataa[] = mac_mult15.dataout[];
	mac_out2.dataa[] = mac_mult1.dataout[];
	mac_out4.dataa[] = mac_mult3.dataout[];
	mac_out6.dataa[] = mac_mult5.dataout[];
	mac_out8.dataa[] = mac_mult7.dataout[];
	sft18a[].in = ( w476w, ( mac_out12.dataout[29..29], ( mac_out12.dataout[28..28], ( mac_out12.dataout[27..27], ( mac_out12.dataout[26..26], ( mac_out12.dataout[25..25], ( mac_out12.dataout[24..24], ( mac_out12.dataout[23..23], ( mac_out12.dataout[22..22], ( mac_out12.dataout[21..21], ( mac_out12.dataout[20..20], ( mac_out12.dataout[19..19], ( mac_out16.dataout[0..0], ( mac_out14.dataout[17..17], ( mac_out14.dataout[16..16], ( mac_out14.dataout[15..15], ( mac_out14.dataout[14..14], ( mac_out14.dataout[13..13], ( mac_out14.dataout[12..12], ( mac_out12.dataout[11..11], ( mac_out12.dataout[10..10], ( mac_out12.dataout[9..9], ( mac_out12.dataout[8..8], ( mac_out12.dataout[7..7], ( mac_out12.dataout[6..6], ( mac_out12.dataout[5..5], ( mac_out12.dataout[4..4], ( mac_out12.dataout[3..3], ( mac_out12.dataout[2..2], ( mac_out12.dataout[1..1], ( mac_out12.dataout[0..0], ( mac_out10.dataout[17..17], ( mac_out10.dataout[16..16], ( mac_out10.dataout[15..15], ( mac_out10.dataout[14..14], ( mac_out10.dataout[13..13], ( mac_out10.dataout[12..12], ( mac_out8.dataout[11..11], ( mac_out8.dataout[10..10], ( mac_out8.dataout[9..9], ( mac_out8.dataout[8..8], ( mac_out8.dataout[7..7], ( mac_out8.dataout[6..6], ( mac_out8.dataout[5..5], ( mac_out8.dataout[4..4], ( mac_out8.dataout[3..3], ( mac_out8.dataout[2..2], ( mac_out8.dataout[1..1], ( mac_out8.dataout[0..0], ( mac_out6.dataout[17..17], ( mac_out6.dataout[16..16], ( mac_out6.dataout[15..15], ( mac_out6.dataout[14..14], ( mac_out6.dataout[13..13], ( mac_out6.dataout[12..12], ( mac_out6.dataout[11..11], ( mac_out6.dataout[10..10], ( mac_out6.dataout[9..9], ( mac_out6.dataout[8..8], ( mac_out6.dataout[7..7], ( mac_out6.dataout[6..6], ( mac_out6.dataout[5..5], ( mac_out6.dataout[4..4], ( mac_out6.dataout[3..3], ( mac_out6.dataout[2..2], ( mac_out6.dataout[1..0]))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
	sft19a[].in = ( w476w, ( w476w, ( w476w, ( w476w, ( w476w, ( w476w, ( w476w, ( w476w, ( w476w, ( w476w, ( w476w, ( mac_out16.dataout[1..1], ( mac_out14.dataout[18..18], ( mac_out12.dataout[17..17], ( mac_out12.dataout[16..16], ( mac_out12.dataout[15..15], ( mac_out12.dataout[14..14], ( mac_out12.dataout[13..13], ( mac_out12.dataout[12..12], ( mac_out10.dataout[29..29], ( mac_out10.dataout[28..28], ( mac_out10.dataout[27..27], ( mac_out10.dataout[26..26], ( mac_out10.dataout[25..25], ( mac_out10.dataout[24..24], ( mac_out10.dataout[23..23], ( mac_out10.dataout[22..22], ( mac_out10.dataout[21..21], ( mac_out10.dataout[20..20], ( mac_out10.dataout[19..19], ( mac_out10.dataout[18..18], ( mac_out8.dataout[17..17], ( mac_out8.dataout[16..16], ( mac_out8.dataout[15..15], ( mac_out8.dataout[14..14], ( mac_out8.dataout[13..13], ( mac_out8.dataout[12..12], ( mac_out6.dataout[29..29], ( mac_out6.dataout[28..28], ( mac_out6.dataout[27..27], ( mac_out6.dataout[26..26], ( mac_out6.dataout[25..25], ( mac_out6.dataout[24..24], ( mac_out6.dataout[23..23], ( mac_out6.dataout[22..22], ( mac_out6.dataout[21..21], ( mac_out6.dataout[20..20], ( mac_out6.dataout[19..19], ( mac_out6.dataout[18..18], ( mac_out4.dataout[17..17], ( mac_out4.dataout[16..16], ( mac_out4.dataout[15..15], ( mac_out4.dataout[14..14], ( mac_out4.dataout[13..13], ( mac_out4.dataout[12..12], ( mac_out4.dataout[11..11], ( mac_out4.dataout[10..10], ( mac_out4.dataout[9..9], ( mac_out4.dataout[8..8], ( mac_out4.dataout[7..7], ( mac_out4.dataout[6..6], ( mac_out4.dataout[5..5], ( mac_out4.dataout[4..4], ( mac_out4.dataout[3..3], ( mac_out4.dataout[2..2], ( mac_out4.dataout[1..0]))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
	sft20a[].in = add17_result[];
	sft22a[].in = ( w476w, ( mac_out16.dataout[12..12], ( mac_out16.dataout[11..11], ( mac_out16.dataout[10..10], ( mac_out16.dataout[9..9], ( mac_out16.dataout[8..8], ( mac_out16.dataout[7..7], ( mac_out16.dataout[6..6], ( mac_out16.dataout[5..5], ( mac_out16.dataout[4..4], ( mac_out16.dataout[3..3], ( mac_out16.dataout[2..2], ( sft20a[55..55].out, ( sft20a[54..54].out, ( sft20a[53..53].out, ( sft20a[52..52].out, ( sft20a[51..51].out, ( sft20a[50..50].out, ( sft20a[49..49].out, ( sft20a[48..48].out, ( sft20a[47..47].out, ( sft20a[46..46].out, ( sft20a[45..45].out, ( sft20a[44..44].out, ( sft20a[43..43].out, ( sft20a[42..42].out, ( sft20a[41..41].out, ( sft20a[40..40].out, ( sft20a[39..39].out, ( sft20a[38..38].out, ( sft20a[37..37].out, ( sft20a[36..36].out, ( sft20a[35..35].out, ( sft20a[34..34].out, ( sft20a[33..33].out, ( sft20a[32..32].out, ( sft20a[31..31].out, ( sft20a[30..30].out, ( sft20a[29..29].out, ( sft20a[28..28].out, ( sft20a[27..27].out, ( sft20a[26..26].out, ( sft20a[25..25].out, ( sft20a[24..24].out, ( sft20a[23..23].out, ( sft20a[22..22].out, ( sft20a[21..21].out, ( sft20a[20..20].out, ( sft20a[19..19].out, ( sft20a[18..18].out, ( mac_out2.dataout[35..35], ( mac_out2.dataout[34..34], ( mac_out2.dataout[33..33], ( mac_out2.dataout[32..32], ( mac_out2.dataout[31..31], ( mac_out2.dataout[30..30], ( mac_out2.dataout[29..29], ( mac_out2.dataout[28..28], ( mac_out2.dataout[27..27], ( mac_out2.dataout[26..26], ( mac_out2.dataout[25..25], ( mac_out2.dataout[24..24], ( mac_out2.dataout[23..23], ( mac_out2.dataout[22..22], ( mac_out2.dataout[21..21], ( mac_out2.dataout[20..20], ( mac_out2.dataout[19..18])))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
	sft23a[].in = ( w476w, ( sft20a[66..66].out, ( sft20a[65..65].out, ( sft20a[64..64].out, ( sft20a[63..63].out, ( sft20a[62..62].out, ( sft20a[61..61].out, ( sft20a[60..60].out, ( sft20a[59..59].out, ( sft20a[58..58].out, ( sft20a[57..57].out, ( sft20a[56..56].out, ( sft28a[37..37].out, ( sft28a[36..36].out, ( sft28a[35..35].out, ( sft28a[34..34].out, ( sft28a[33..33].out, ( sft28a[32..32].out, ( sft28a[31..31].out, ( sft28a[30..30].out, ( sft28a[29..29].out, ( sft28a[28..28].out, ( sft28a[27..27].out, ( sft28a[26..26].out, ( sft28a[25..25].out, ( sft28a[24..24].out, ( sft28a[23..23].out, ( sft28a[22..22].out, ( sft28a[21..21].out, ( sft28a[20..20].out, ( sft28a[19..19].out, ( sft28a[18..18].out, ( sft28a[17..17].out, ( sft28a[16..16].out, ( sft28a[15..15].out, ( sft28a[14..14].out, ( sft28a[13..13].out, ( sft28a[12..12].out, ( sft28a[11..11].out, ( sft28a[10..10].out, ( sft28a[9..9].out, ( sft28a[8..8].out, ( sft28a[7..7].out, ( sft28a[6..6].out, ( sft28a[5..5].out, ( sft28a[4..4].out, ( sft28a[3..3].out, ( sft28a[2..2].out, ( sft28a[1..1].out, ( sft28a[0..0].out, ( sft20a[17..17].out, ( sft20a[16..16].out, ( sft20a[15..15].out, ( sft20a[14..14].out, ( sft20a[13..13].out, ( sft20a[12..12].out, ( sft20a[11..11].out, ( sft20a[10..10].out, ( sft20a[9..9].out, ( sft20a[8..8].out, ( sft20a[7..7].out, ( sft20a[6..6].out, ( sft20a[5..5].out, ( sft20a[4..4].out, ( sft20a[3..3].out, ( sft20a[2..2].out, ( sft20a[1..1].out, sft20a[0..0].out)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))));
	sft24a[].in = add21_result[];
	sft26a[].in = ( w476w, ( mac_out12.dataout[18..18], ( mac_out10.dataout[35..35], ( mac_out10.dataout[34..34], ( mac_out10.dataout[33..33], ( mac_out10.dataout[32..32], ( mac_out10.dataout[31..31], ( mac_out10.dataout[30..30], ( mac_out14.dataout[11..11], ( mac_out14.dataout[10..10], ( mac_out14.dataout[9..9], ( mac_out14.dataout[8..8], ( mac_out14.dataout[7..7], ( mac_out14.dataout[6..6], ( mac_out14.dataout[5..5], ( mac_out14.dataout[4..4], ( mac_out14.dataout[3..3], ( mac_out14.dataout[2..2], ( mac_out14.dataout[1..1], ( mac_out14.dataout[0..0], ( mac_out6.dataout[35..35], ( mac_out6.dataout[34..34], ( mac_out6.dataout[33..33], ( mac_out6.dataout[32..32], ( mac_out6.dataout[31..31], ( mac_out6.dataout[30..30], ( mac_out10.dataout[11..11], ( mac_out10.dataout[10..10], ( mac_out10.dataout[9..9], ( mac_out10.dataout[8..8], ( mac_out10.dataout[7..7], ( mac_out10.dataout[6..6], ( mac_out10.dataout[5..5], ( mac_out10.dataout[4..4], ( mac_out10.dataout[3..3], ( mac_out10.dataout[2..2], ( mac_out10.dataout[1..0])))))))))))))))))))))))))))))))))))));
	sft27a[].in = ( w476w, ( w476w, ( w476w, ( w476w, ( w476w, ( w476w, ( w476w, ( w476w, ( mac_out8.dataout[29..29], ( mac_out8.dataout[28..28], ( mac_out8.dataout[27..27], ( mac_out8.dataout[26..26], ( mac_out8.dataout[25..25], ( mac_out8.dataout[24..24], ( mac_out8.dataout[23..23], ( mac_out8.dataout[22..22], ( mac_out8.dataout[21..21], ( mac_out8.dataout[20..20], ( mac_out8.dataout[19..19], ( mac_out8.dataout[18..18], ( w476w, ( w476w, ( w476w, ( w476w, ( w476w, ( w476w, ( mac_out4.dataout[29..29], ( mac_out4.dataout[28..28], ( mac_out4.dataout[27..27], ( mac_out4.dataout[26..26], ( mac_out4.dataout[25..25], ( mac_out4.dataout[24..24], ( mac_out4.dataout[23..23], ( mac_out4.dataout[22..22], ( mac_out4.dataout[21..21], ( mac_out4.dataout[20..20], ( mac_out4.dataout[19..18])))))))))))))))))))))))))))))))))))));
	sft28a[].in = add25_result[];
	result[84..0] = w1013w[84..0];
	w1013w[] = ( sft24a[67..66].out, sft24a[65..64].out, sft24a[63..62].out, sft24a[61..60].out, sft24a[59..58].out, sft24a[57..56].out, sft24a[55..54].out, sft24a[53..52].out, sft24a[51..50].out, sft24a[49..48].out, sft24a[47..46].out, sft24a[45..44].out, sft24a[43..42].out, sft24a[41..40].out, sft24a[39..38].out, sft24a[37..36].out, sft24a[35..34].out, sft24a[33..32].out, sft24a[31..30].out, sft24a[29..28].out, sft24a[27..26].out, sft24a[25..24].out, sft24a[23..22].out, sft24a[21..20].out, sft24a[19..18].out, sft24a[17..16].out, sft24a[15..14].out, sft24a[13..12].out, sft24a[11..10].out, sft24a[9..8].out, sft24a[7..6].out, sft24a[5..4].out, sft24a[3..2].out, sft24a[1..0].out, mac_out2.dataout[17..17], mac_out2.dataout[16..16], mac_out2.dataout[15..15], mac_out2.dataout[14..14], mac_out2.dataout[13..13], mac_out2.dataout[12..12], mac_out2.dataout[11..11], mac_out2.dataout[10..10], mac_out2.dataout[9..9], mac_out2.dataout[8..8], mac_out2.dataout[7..7], mac_out2.dataout[6..6], mac_out2.dataout[5..5], mac_out2.dataout[4..4], mac_out2.dataout[3..3], mac_out2.dataout[2..2], mac_out2.dataout[1..1], mac_out2.dataout[0..0]);
	w476w = B"0";
END;
--VALID FILE
